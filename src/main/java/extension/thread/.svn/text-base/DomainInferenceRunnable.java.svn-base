package org.aksw.sina.thread;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;

import Model.GraphBuilding.DomainRangeInference;

public class DomainInferenceRunnable implements Runnable {
	Set<String> dS;
	Set<OWLClass> ancestorSource;
	OWLDataFactory dataFactory;
	Set<String> propertySet;
	Set<OWLClass> domainSet;
	OWLObjectPropertyExpression prop;
	DomainRangeInference dRI;
	Set<OWLClass> rangeSet;

	public DomainInferenceRunnable(
			Set<OWLClass> ancestorSource, 
			OWLDataFactory dataFactory,
			HashSet<String> propertySet, 
			OWLObjectPropertyExpression prop, 
			Set<OWLClass> domainSet,
			DomainRangeInference dRI, 
			Set<OWLClass> rangeSet) {
		this.dS = new HashSet<String>();;
		this.ancestorSource = ancestorSource;
		this.dataFactory = dataFactory;
		this.propertySet = propertySet;
		this.prop = prop;
		this.domainSet = domainSet;
		this.dRI = dRI;
		this.rangeSet = rangeSet;
	}
	
	@Override
	public void run() {
		dS.addAll(dRI.getDomainInferenceOverKB(prop.asOWLObjectProperty().getIRI().toString()));
		for(String s:dS) {
			 IRI iri              =  IRI.create(s);
			 OWLClass ClassObject =  dataFactory.getOWLClass(iri); 
			 domainSet.add(ClassObject);
		}	 
		domainSet.retainAll(ancestorSource);		 	
		 if(domainSet.size()>0 && rangeSet.size()>0) {
			synchronized (propertySet) {
				 propertySet.add(prop.asOWLObjectProperty().getIRI().toString());
			}					
		 }
	}

}
