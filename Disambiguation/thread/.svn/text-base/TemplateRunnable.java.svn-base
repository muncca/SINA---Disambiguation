package org.aksw.sina.thread;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.aksw.sina.DBPediaOWL;
import org.aksw.sina.OWLDataFactory;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;

import Model.Constants;
import Model.GraphBuilding.Entity;
import Model.GraphBuilding.Graph;
import Model.GraphBuilding.PropertyManagement;
import Model.GraphBuilding.PropertyManagementOverKB;
import Model.GraphBuilding.Template;

public class TemplateRunnable implements Runnable {

	private Graph g2  = null;
	private  Graph bgGraph = null;
	private Template template = null;
	private List<Template> generatedTemplates = null;
	HashSet<String> PropertySet	= null;
	PropertyManagementOverKB pmk = null;
	
	public TemplateRunnable(Graph g2, Graph bgGraph, List<Template> generatedTemplates, Template template) {
		this.g2 = g2;
		this.bgGraph = bgGraph;
		this.template = template;
		this.generatedTemplates = generatedTemplates;
		PropertySet	=	new HashSet<String>();
		pmk 	  =  new PropertyManagementOverKB();
	}
	
	@Override
	public void run() {
		PropertyManagement PM             =  new PropertyManagement();
		
		int index                         =  0;
		index++;
		boolean FoundConnection           =  false;
		OWLOntology DBpediaOWL;
		try {
			DBpediaOWL = DBPediaOWL.getInstance();
			OWLDataFactory dataFactory 	= 	org.aksw.sina.OWLDataFactory.getInstance();
		
			for ( Entity e1 : bgGraph.getEntityList() )
			{
			//	if(!e1.gettraverseFlag())
			//	{
				for ( Entity e2 : g2.getEntityList() )
				{
					Set<String> SourceClassSet  =  new HashSet();
					Set<String> SinkClassSet    =  new HashSet();
					
					if ( e1.gettype() == Constants.TYPE_CLASS )
					{
						SourceClassSet.add(e1.getIRI());
					}
					else if ( e1.gettype() == Constants.TYPE_INSTANCE  ||  e1.gettype() == Constants.TYPE_VARIABLE )
					{
						SourceClassSet.addAll(e1.getClassTypeIRI());
					}
					
					if ( e2.gettype() == Constants.TYPE_CLASS )
					{ 
						SinkClassSet.add(e2.getIRI());
					 
					}
					else if ( e2.gettype() == Constants.TYPE_INSTANCE  ||  e2.gettype() == Constants.TYPE_VARIABLE )
					{
						SinkClassSet.addAll(e2.getClassTypeIRI());
					}
					
					//todo: baraye anvadae kelas ha iri bayad sakhte shav
					
					// Connection from e1 to e2
					if( e1.gettype() == Constants.TYPE_INSTANCE && e2.gettype() == Constants.TYPE_INSTANCE )
					{
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e1, e2);
					}
					else if( e1.gettype() == Constants.TYPE_INSTANCE  &&  e2.gettype() == Constants.TYPE_VARIABLE )
					{
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e1, e2);
					}
					
					if( e1.gettype() == Constants.TYPE_VARIABLE  &&  e2.gettype() == Constants.TYPE_INSTANCE )
					{ 
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e1, e2);
					 
					}
					else if( e1.gettype() == Constants.TYPE_VARIABLE  &&  e2.gettype() == Constants.TYPE_VARIABLE )
					{
						PropertySet =  PM.getobjectPropertiesbetweenEntiies(SourceClassSet, SinkClassSet, DBpediaOWL);
					}
					
					
					if ( PropertySet.size() > 0 ) 
					{
					    String Property = "";	
						if ( PropertySet.size() == 1 )
						{
							Property = PropertySet.toString();
						}
						else
						{
							Property = "?p";
							// todo: a method for creating new property variable
						}
					   Template a           = template.copyTemplate();
					   int indexfirstGraph  = template.getGraphList().indexOf(bgGraph);
					   int indexSecondGraph = template.getGraphList().indexOf(g2);
					   
					  /* for ( Entity e : a.getGraphList().get(indexfirstGraph).getEntityList() )
						{
						   e.settraverseFlag(true);
						}*/
						
					   Set<OWLObjectProperty> ps=new HashSet<OWLObjectProperty>();
					   for (String s:PropertySet)
					   {						   
						   IRI iri_property                  =  IRI.create(s);
						   OWLObjectProperty OWLProperty     =  dataFactory.getOWLObjectProperty(iri_property);
						   ps.add(OWLProperty);						   
					   }
					   
					   a.mergGraph(indexfirstGraph, indexSecondGraph,e1,e2,Property, ps );
					   synchronized (generatedTemplates) {
						   generatedTemplates.add(a);
					   }					   
					   FoundConnection      = true;
					} 
					
					// Connection from e2 to e1
					PropertySet.clear();
					
					if( e1.gettype() == Constants.TYPE_INSTANCE && e2.gettype() == Constants.TYPE_INSTANCE ) {
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e2, e1);
					}
					else if( e1.gettype() == Constants.TYPE_INSTANCE  &&  e2.gettype() == Constants.TYPE_VARIABLE ) {
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e2, e1);
					}
					
					if( e1.gettype() == Constants.TYPE_VARIABLE  &&  e2.gettype() == Constants.TYPE_INSTANCE ) { 
						PropertySet = pmk.getPropertiesBetweenTwoInstance(e2, e1);					 
					}
					else if( e1.gettype() == Constants.TYPE_VARIABLE  &&  e2.gettype() == Constants.TYPE_VARIABLE ) {
						PropertySet = PM.getobjectPropertiesbetweenEntiies(SinkClassSet, SourceClassSet, DBpediaOWL);
					}
					
					PropertySet = PM.getobjectPropertiesbetweenEntiies(SinkClassSet, SourceClassSet, DBpediaOWL);	
					if ( PropertySet.size() > 0 )
					{
			            String Property = "";	
						if ( PropertySet.size() == 1 )
						{
							Property = PropertySet.toString();
						}
						else
						{
							Property = "?p";
						// todo: a method for creating new property variable
						}
						
						int indexfirstGraph   =  template.getGraphList().indexOf(bgGraph);
						int indexSecondGraph  =  template.getGraphList().indexOf(g2);
						Template a            =  template.copyTemplate();
						
						Set<OWLObjectProperty> ps=new HashSet();
						for (String s:PropertySet) {
							IRI iri_property                  =  IRI.create(s);
							OWLObjectProperty OWLProperty     =  dataFactory.getOWLObjectProperty(iri_property);
							ps.add(OWLProperty);							   
						 }
						
						a.mergGraph(indexSecondGraph,indexfirstGraph,e2,e1,Property, ps);
						synchronized (generatedTemplates) {
							   generatedTemplates.add(a);
						}
						FoundConnection       =  true;					
					}									
				}				
			}
		} catch (OWLOntologyCreationException e) {
			e.printStackTrace();
		}
		
		index++;
	}

}
